create table "public"."solves" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "game_id" uuid not null,
    "room_id" bigint not null,
    "started_at" timestamp with time zone,
    "solved_at" timestamp with time zone
);


alter table "public"."solves" enable row level security;

CREATE UNIQUE INDEX solves_pkey ON public.solves USING btree (id);

alter table "public"."solves" add constraint "solves_pkey" PRIMARY KEY using index "solves_pkey";

alter table "public"."solves" add constraint "solves_game_id_fkey" FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE not valid;

alter table "public"."solves" validate constraint "solves_game_id_fkey";

alter table "public"."solves" add constraint "solves_room_id_fkey" FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE not valid;

alter table "public"."solves" validate constraint "solves_room_id_fkey";

alter table "public"."solves" add constraint "solves_user_id_fkey" FOREIGN KEY (user_id) REFERENCES accounts(id) ON DELETE CASCADE not valid;

alter table "public"."solves" validate constraint "solves_user_id_fkey";

create policy "Users can insert their own solves if they can view the game"
on "public"."solves"
as permissive
for insert
to authenticated
with check (((user_id = auth.uid()) AND (EXISTS ( SELECT 1
   FROM games
  WHERE (games.id = solves.game_id)))));


create policy "Users can only view their own solves"
on "public"."solves"
as permissive
for select
to authenticated
using ((user_id = auth.uid()));


create policy "Users can update their own solves"
on "public"."solves"
as permissive
for update
to authenticated
using (((user_id = auth.uid()) AND (EXISTS ( SELECT 1
   FROM games
  WHERE (games.id = solves.game_id)))))
with check (((user_id = auth.uid()) AND (EXISTS ( SELECT 1
   FROM games
  WHERE (games.id = solves.game_id)))));



